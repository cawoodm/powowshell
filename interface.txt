PARAMETERS:
	a static list of fields which the pipeline designer must provide at design time
	if you want dynamic input, use an input object provided by a preceding component

INPUT: 
	data passed to this component by a preceding component
	can be a simple value called a Scalar like 1 or "hello"
	can be a JSON object like {name:"John", age:21, smoker: false}
	can be an Array of objects 
{
	type: Scalar/Array/Object,
	subtype: string/number/boolean/date/datetime/"ClassName",
	sample: ...
}


Rules:
1. COMPONENTS
* 1.1 All components MUST be powershell scripts
** Don't worry, powerShell is cool and can call anything (DOS, Node, Python etc...)
* 1.2
* It must declare its PARAMETERS with types
* If it accepts piped INPUT, it gets the data as a String from the pipeline (stdin) with parameter $InputObject
* If it provides piped OUTPUT, it writes it's output as a String to the pipeline (stdout) with Write-Output
** Annotate scriptlet with `[OutputType([String])]`
* 1.3 Component is movable
** should run and work regardless of where it is located (no $PSScriptRoot)
** should not include any scriptlets from a relative path
* 1.4 Handles errors correctly:
** Write error messages to the pipeline (stderr) with Write-Error
* 1.5 Documentation
* Has powershell help/comments describing (for humans) the function and interface (.Parameter, .Inputs, .Outputs)
** .Inputs and .Outputs will always be `text` or `text/*` (e.g. `text/json`)
** .Inputs and/or .Outputs can also be `none`
* 1.6 Should support dry runs with -WhatIf (SupportsShouldProcess)
** This means a pipeline can be verified (using `pow verify`) by running it without any side-effects

* 2. PIPELINES
Pipelines are ultimately powershell scripts which wire various components together
As such, they are similar to components in that they
* Have PARAMETERS which can be supplied at runtime and which can have defaults set at design time (TODO)
** These can be passed to components in the step by defining e.g. `stepParameter: "{$PipelineParams.DataSource}"
** These values are effectively readonly to the steps and won't be changed
* Have GLOBALS defined which all components can read and write!
* Can produce text output on stdout
* Pipelines should accept piped input as well
* Pipelines run and end - no continuous operation (streaming) mode supported

* Input?
* Output?
